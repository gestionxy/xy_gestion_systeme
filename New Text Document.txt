import plotly.express as px
import pandas as pd
from datetime import timedelta
import streamlit as st

def analyze_unpaid_accounts():
    """
    主函数：分析应付账款数据，生成月度和周度趋势图表
    功能包括：
    1. 月度未付款金额趋势分析
    2. 周度未付款金额趋势分析  
    3. 部门应付差额柱状图和饼状图
    """
    
    # ============================================================================
    # 第一部分：数据加载与基础处理
    # ============================================================================
    
    # 1. 加载供应商数据
    df_unpaid_zhexiantu = load_supplier_data()
    
    # 2. 数据清理和类型转换
    print("开始数据清理...")
    
    # 将发票金额和实际支付金额转换为数值类型，处理异常值和空值
    df_unpaid_zhexiantu['发票金额'] = pd.to_numeric(
        df_unpaid_zhexiantu['发票金额'], errors='coerce'
    ).fillna(0)
    
    df_unpaid_zhexiantu['实际支付金额'] = pd.to_numeric(
        df_unpaid_zhexiantu['实际支付金额'], errors='coerce'
    ).fillna(0)
    
    # 3. 计算实际差额（核心指标：未付款金额）
    # 实际差额 = 发票金额 - 实际支付金额
    # 正值表示还有未付款，负值表示多付款
    df_unpaid_zhexiantu['实际差额'] = (
        df_unpaid_zhexiantu['发票金额'] - df_unpaid_zhexiantu['实际支付金额']
    )
    
    # 4. 处理发票日期，转换为datetime格式
    df_unpaid_zhexiantu['发票日期'] = pd.to_datetime(
        df_unpaid_zhexiantu['发票日期'], errors='coerce'
    )
    
    # 5. 创建月份列，用于月度分析（格式：YYYY-MM）
    df_unpaid_zhexiantu['月份'] = (
        df_unpaid_zhexiantu['发票日期'].dt.to_period('M').astype(str)
    )
    
    print("数据清理完成")
    
    # ============================================================================
    # 第二部分：月度数据汇总与分析
    # ============================================================================
    
    print("开始月度数据汇总...")
    
    # 6. 按部门和月份汇总未付款金额
    # 这是核心汇总表，每行代表一个部门在某个月的未付款总额
    unpaid_summary = (
        df_unpaid_zhexiantu
        .groupby(['部门', '月份'])['实际差额']
        .sum()
        .reset_index()
    )
    
    # 7. 计算辅助统计数据字典
    # 7.1 每月总未付款金额字典 {月份: 总未付金额}
    monthly_totals_dict = (
        df_unpaid_zhexiantu
        .groupby('月份')['实际差额']
        .sum()
        .to_dict()
    )
    
    # 7.2 每月总发票金额字典 {月份: 总发票金额}
    monthly_invoice_totals_dict = (
        df_unpaid_zhexiantu
        .groupby('月份')['发票金额']
        .sum()
        .to_dict()
    )
    
    # 8. 将月度总计数据映射到汇总表中
    unpaid_summary['总发票金额'] = unpaid_summary['月份'].map(monthly_invoice_totals_dict)
    unpaid_summary['总未付金额'] = unpaid_summary['月份'].map(monthly_totals_dict)
    
    # 9. 计算累计未付款金额（截止到每月的累计值）
    print("计算累计未付款金额...")
    
    # 9.1 获取所有月份并按时间排序
    sorted_months = sorted(df_unpaid_zhexiantu['月份'].unique())
    
    # 9.2 逐月计算累计未付金额
    cumulative_unpaid_dict = {}
    cumulative_sum = 0
    
    for month in sorted_months:
        # 获取当月未付总额
        current_month_sum = monthly_totals_dict.get(month, 0)
        # 累加到总和
        cumulative_sum += current_month_sum
        # 记录累计值
        cumulative_unpaid_dict[month] = cumulative_sum
    
    # 9.3 将累计值映射到汇总表
    unpaid_summary['累计未付金额'] = unpaid_summary['月份'].map(cumulative_unpaid_dict)
    
    # 10. 生成月度图表的hover提示信息
    unpaid_summary['提示信息'] = unpaid_summary.apply(
        lambda row: (
            f"🔹截止到{row['月份'][:4]}年{row['月份'][5:]}月 <br>"
            f"累计未付金额：{row['累计未付金额']:,.0f}<br>"
            f"当月未付金额：{row['总未付金额']:,.0f}<br>"
            f"当月 新增发票总金额：{monthly_invoice_totals_dict.get(row['月份'], 0):,.0f}<br>"
            f"<br>"
            f"部门：{row['部门']}<br>"
            f"当月未付金额：{row['实际差额']:,.0f}<br>"
            f"占比：{row['实际差额'] / monthly_invoice_totals_dict.get(row['月份'], 1):.1%}"
        ),
        axis=1
    )
    
    # ============================================================================
    # 第三部分：生成部门颜色映射和月度图表
    # ============================================================================
    
    # 11. 为各部门生成一致的颜色映射
    unique_departments = sorted(unpaid_summary['部门'].unique())
    colors = px.colors.qualitative.Dark24
    color_map = {
        dept: colors[i % len(colors)] 
        for i, dept in enumerate(unique_departments)
    }
    
    # 12. 绘制月度折线图
    print("生成月度趋势图...")
    
    fig_month = px.line(
        unpaid_summary,
        x="月份",
        y="实际差额",
        color="部门",
        title="各部门每月未付账金额",
        markers=True,
        labels={"实际差额": "未付账金额", "月份": "月份"},
        line_shape="linear",
        color_discrete_map=color_map,
        hover_data={'提示信息': True}
    )
    
    # 添加数据标签
    fig_month.update_traces(
        text=unpaid_summary["实际差额"].round(0).astype(int),
        textposition="top center",
        hovertemplate="%{customdata[0]}"
    )
    
    # 13. 显示月度图表
    st.plotly_chart(fig_month, key="monthly_unpaid_chart001")
    
    # ============================================================================
    # 第四部分：周度数据处理与分析
    # ============================================================================
    
    print("开始周度数据处理...")
    
    # 14. 计算每个发票日期对应的周范围（周一到周日）
    # 14.1 计算周开始日期（周一）
    df_unpaid_zhexiantu['周开始'] = (
        df_unpaid_zhexiantu['发票日期'] - 
        pd.to_timedelta(df_unpaid_zhexiantu['发票日期'].dt.weekday, unit='D')
    )
    
    # 14.2 计算周结束日期（周日）
    df_unpaid_zhexiantu['周结束'] = df_unpaid_zhexiantu['周开始'] + timedelta(days=6)
    
    # 14.3 生成周范围字符串（格式：YYYY-MM-DD ~ YYYY-MM-DD）
    df_unpaid_zhexiantu['周范围'] = (
        df_unpaid_zhexiantu['周开始'].dt.strftime('%Y-%m-%d') + 
        ' ~ ' + 
        df_unpaid_zhexiantu['周结束'].dt.strftime('%Y-%m-%d')
    )
    
    # 15. 提供月份选择器给用户
    valid_months = sorted(df_unpaid_zhexiantu['月份'].unique())
    selected_month = st.selectbox(
        "🔎选择查看具体周数据的月份", 
        valid_months, 
        index=len(valid_months) - 1
    )
    
    # 16. 获取选定月份涉及的所有周范围
    # 包括跨月的周（周的一部分在选定月份内）
    week_ranges = df_unpaid_zhexiantu[
        (df_unpaid_zhexiantu['发票日期'].dt.to_period('M').astype(str) == selected_month) |
        (df_unpaid_zhexiantu['周开始'].dt.to_period('M').astype(str) == selected_month) |
        (df_unpaid_zhexiantu['周结束'].dt.to_period('M').astype(str) == selected_month)
    ]['周范围'].unique()
    
    # 17. 按周和部门汇总未付款金额
    weekly_summary_filtered = (
        df_unpaid_zhexiantu[
            (df_unpaid_zhexiantu['周范围'].isin(week_ranges)) &
            (df_unpaid_zhexiantu['发票日期'] >= df_unpaid_zhexiantu['周开始']) &
            (df_unpaid_zhexiantu['发票日期'] <= df_unpaid_zhexiantu['周结束'])
        ]
        .groupby(['部门', '周范围', '周开始', '周结束'])['实际差额']
        .sum()
        .reset_index()
    )
    
    # 18. 确保周度数据按时间顺序排列
    weekly_summary_filtered['周开始'] = pd.to_datetime(weekly_summary_filtered['周开始'])
    weekly_summary_filtered = weekly_summary_filtered.sort_values(by='周开始').reset_index(drop=True)
    
    # 19. 计算周度统计字典
    # 19.1 每周总未付款金额字典
    weekly_totals_dict = (
        df_unpaid_zhexiantu[df_unpaid_zhexiantu['周范围'].isin(week_ranges)]
        .groupby('周范围')['实际差额']
        .sum()
        .to_dict()
    )
    
    # 19.2 每周总发票金额字典
    weekly_invoice_totals_dict = (
        df_unpaid_zhexiantu[df_unpaid_zhexiantu['周范围'].isin(week_ranges)]
        .groupby('周范围')['发票金额']
        .sum()
        .to_dict()
    )
    
    # 20. 将周度总计数据映射到周汇总表
    weekly_summary_filtered['总发票金额'] = weekly_summary_filtered['周范围'].map(weekly_invoice_totals_dict)
    weekly_summary_filtered['总未付金额'] = weekly_summary_filtered['周范围'].map(weekly_totals_dict)
    
    # 21. 计算周度累计未付款金额
    print("计算周度累计未付款金额...")
    
    # 21.1 按周范围汇总，计算每周总未付金额
    df_week_accumulation_unpaid = (
        df_unpaid_zhexiantu
        .groupby('周范围')['实际差额']
        .sum()
        .reset_index(name='实际差额')
    )
    
    # 21.2 计算累计未付金额（按周范围字符串排序后累加）
    df_week_accumulation_unpaid['累计未付金额'] = df_week_accumulation_unpaid['实际差额'].cumsum()
    
    # 21.3 将累计值映射到周汇总表
    weekly_summary_filtered['累计未付金额'] = weekly_summary_filtered['周范围'].map(
        df_week_accumulation_unpaid.set_index('周范围')['累计未付金额']
    )
    
    # 22. 生成周度图表的hover提示信息
    weekly_summary_filtered['提示信息'] = weekly_summary_filtered.apply(
        lambda row: (
            f"🔹 截止至{row['周范围']}<br>"
            f"累计未付金额：{row['累计未付金额']:,.0f}<br>"
            f"本周发票金额：{row['总发票金额']:,.0f}<br>"
            f"本周未付金额：{row['总未付金额']:,.0f}<br>"
            f"本周未付比例：{row['总未付金额'] / row['总发票金额']:.1%}<br>"
            f"<br>"
            f"部门：{row['部门']}<br>"
            f"未付金额：{row['实际差额']:,.0f}<br>"
            f"占比：{row['实际差额'] / row['总发票金额']:.1%}"
        ),
        axis=1
    )
    
    # 23. 绘制周度折线图
    print("生成周度趋势图...")
    
    fig_week = px.line(
        weekly_summary_filtered,
        x="周范围",
        y="实际差额",
        color="部门",
        title=f"{selected_month} 每周各部门未付账金额",
        markers=True,
        labels={"实际差额": "未付账金额", "周范围": "周"},
        line_shape="linear",
        color_discrete_map=color_map,
        hover_data={'提示信息': True},
        category_orders={"周范围": weekly_summary_filtered['周范围'].tolist()}
    )
    
    # 添加数据标签
    fig_week.update_traces(
        text=weekly_summary_filtered["实际差额"].round(0).astype(int),
        textposition="top center",
        hovertemplate="%{customdata[0]}"
    )
    
    # 24. 显示周度图表
    st.plotly_chart(fig_week, key="weekly_unpaid_chart001")
    
    # ============================================================================
    # 第五部分：部门应付差额统计图表
    # ============================================================================
    
    print("生成部门统计图表...")
    
    # 25. 生成部门应付差额柱状图
    # 注意：这里使用了filtered_time_only变量，需要确保该变量已定义
    # 假设这是经过时间筛选后的数据
    bar_df = filtered_time_only.groupby("部门")[['应付未付差额']].sum().reset_index()
    bar_df['应付未付差额'] = bar_df['应付未付差额'].round(0).astype(int)
    
    fig_bar = px.bar(
        bar_df,
        x="部门",
        y="应付未付差额",
        color="部门",
        title="选中部门应付未付差额",
        text="应付未付差额",
        labels={"应付未付差额": "金额（$ CAD）"},
        color_discrete_map=color_map
    )
    fig_bar.update_traces(textposition="outside")
    
    # 26. 生成部门应付差额饼状图
    fig_pie = px.pie(
        bar_df,
        names="部门",
        values="应付未付差额",
        title="所有部门占总应付差额比例",
        labels={"应付未付差额": "金额（$ CAD）"},
        hole=0.4,
        color_discrete_map=color_map
    )
    
    fig_pie.update_traces(
        marker=dict(colors=[color_map.get(dept, '#CCCCCC') for dept in bar_df['部门']])
    )
    
    # 27. 显示柱状图和饼状图
    st.plotly_chart(fig_bar)
    st.plotly_chart(fig_pie)
    
    print("所有图表生成完成！")

# ============================================================================
# 主程序执行
# ============================================================================

if __name__ == "__main__":
    # 执行应付账款分析
    analyze_unpaid_accounts()